const connect = ReactRedux.connect;

function mapStateToPropsMask(state) {
  const {player} = state.game;
  const mapWidth = MAP_WIDTH;
  const mapHeight = MAP_HEIGHT;
  const darkness = state.darkness;
  const {x, y} = player;
  let data;
  if (darkness === OFF) {
    data = getArray(mapWidth, mapHeight, () => TRANS_BLOCK);
  } else {
    data = getArray(mapWidth, mapHeight, () => BLACK_BLOCK);
    const shape = [[BLACK_BLOCK, BLACK_BLOCK, BLACK_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, BLACK_BLOCK, BLACK_BLOCK, BLACK_BLOCK],
                  [BLACK_BLOCK, BLACK_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, BLACK_BLOCK, BLACK_BLOCK],
                  [BLACK_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, BLACK_BLOCK],
                  [TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK],
                  [TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK],
                  [TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK],
                  [TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK],
                  [TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK],
                  [TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK],
                  [TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK],
                  [BLACK_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, BLACK_BLOCK],
                  [BLACK_BLOCK, BLACK_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, BLACK_BLOCK, BLACK_BLOCK],
                  [BLACK_BLOCK, BLACK_BLOCK, BLACK_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, TRANS_BLOCK, BLACK_BLOCK, BLACK_BLOCK, BLACK_BLOCK]
                  ];
    const shapeWidth = shape[0].length;
    const shapeHeight = shape.length;
    let maskX;
    let maskY;
    for (let j = 0; j < shapeHeight; j++) {
      maskY = y + j - Math.floor(shapeHeight / 2);
      if (maskY < 0 || maskY > mapHeight - 1) {
        break;
      }
      for (let i = 0; i < shapeWidth; i++) {
        maskX = x + i - Math.floor(shapeWidth / 2);
        if (maskX < 0 || maskX > mapWidth - 1) {
          break;
        }
        data[maskY][maskX] = shape[j][i];
      }
    }
  }

  return {
    data
  };
}

const Mask = connect(
  mapStateToPropsMask
)(Board);
